<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="35" time="0.334" timestamp="2022-01-25T08:31:42.860984" hostname="the-bank"><testcase classname="learning_to_test_code.tests.leet75.test_basic_binary_search.Test" name="test_binary_search" file="learning_to_test_code/tests/leet75/test_basic_binary_search.py" line="10" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_basic_binary_tree.Test" name="test_create_tree" file="learning_to_test_code/tests/leet75/test_basic_binary_tree.py" line="11" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_basic_binary_tree.Test" name="test_inorder" file="learning_to_test_code/tests/leet75/test_basic_binary_tree.py" line="17" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_basic_binary_tree.Test" name="test_inorder_pythonic" file="learning_to_test_code/tests/leet75/test_basic_binary_tree.py" line="21" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_basic_binary_tree.Test" name="test_is_full" file="learning_to_test_code/tests/leet75/test_basic_binary_tree.py" line="25" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_basic_binary_tree.Test" name="test_depth_of_tree" file="learning_to_test_code/tests/leet75/test_basic_binary_tree.py" line="28" time="0.000" /><testcase classname="learning_to_test_code.tests.leet75.test_best_time_to_buy_and_sell_stock.Test" name="test_solution" file="learning_to_test_code/tests/leet75/test_best_time_to_buy_and_sell_stock.py" line="10" time="0.000" /><testcase classname="learning_to_test_code.tests.leet75.test_contains_duplicate.Test" name="test_solution" file="learning_to_test_code/tests/leet75/test_contains_duplicate.py" line="15" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_contains_duplicate.Test" name="test_solution_contains_duplicate_sort" file="learning_to_test_code/tests/leet75/test_contains_duplicate.py" line="19" time="0.000" /><testcase classname="learning_to_test_code.tests.leet75.test_contains_duplicate.Test" name="test_contains_duplicate_hashset" file="learning_to_test_code/tests/leet75/test_contains_duplicate.py" line="23" time="0.000" /><testcase classname="learning_to_test_code.tests.leet75.test_dfs.Test" name="test_create_graph" file="learning_to_test_code/tests/leet75/test_dfs.py" line="9" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_dfs.Test" name="test_dfs" file="learning_to_test_code/tests/leet75/test_dfs.py" line="15" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_dfs.Test" name="test_bfs" file="learning_to_test_code/tests/leet75/test_dfs.py" line="19" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_final_value_after_operations.Test" name="test_solution" file="learning_to_test_code/tests/leet75/test_final_value_after_operations.py" line="7" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_find_minimum_rotated_sorted_array.Test" name="test_solution" file="learning_to_test_code/tests/leet75/test_find_minimum_rotated_sorted_array.py" line="10" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_find_minimum_rotated_sorted_array" name="test" file="../anaconda3/envs/test_env3.9/lib/python3.9/cgi.py" line="841" time="0.009" /><testcase classname="learning_to_test_code.tests.leet75.test_isAnagram.Test" name="test_isAnagram" file="learning_to_test_code/tests/leet75/test_isAnagram.py" line="11" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_longest_palindrome.Test" name="test_bf_longest_palindrome" file="learning_to_test_code/tests/leet75/test_longest_palindrome.py" line="14" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_maxArea.Test" name="test_maxArea" file="learning_to_test_code/tests/leet75/test_maxArea.py" line="9" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_maxNumberOfBalloons.Test" name="test_maxNumberOfBalloons" file="learning_to_test_code/tests/leet75/test_maxNumberOfBalloons.py" line="10" time="0.001"><failure message="TypeError: maxNumberOfBalloons() takes 1 positional argument but 2 were given">self = &lt;test_maxNumberOfBalloons.Test object at 0x7f51172d1160&gt;

    def test_maxNumberOfBalloons(self):
        solution = Solution()
        for case, expected in self.test_cases:
&gt;           assert solution.maxNumberOfBalloons(case) == expected
E           TypeError: maxNumberOfBalloons() takes 1 positional argument but 2 were given

tests/leet75/test_maxNumberOfBalloons.py:14: TypeError</failure></testcase><testcase classname="learning_to_test_code.tests.leet75.test_max_subarray_fixed_size_k.Test" name="test_max_subarray_of_size_k" file="learning_to_test_code/tests/leet75/test_max_subarray_fixed_size_k.py" line="10" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_maximum_product_subarray.Test" name="test_max_product_subarray" file="learning_to_test_code/tests/leet75/test_maximum_product_subarray.py" line="10" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_maximum_sum_subarray.Test" name="test_brute_force_maxSubArray" file="learning_to_test_code/tests/leet75/test_maximum_sum_subarray.py" line="11" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_maximum_sum_subarray.Test" name="test_maxSubArray" file="learning_to_test_code/tests/leet75/test_maximum_sum_subarray.py" line="16" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_node.Test" name="test_node" file="learning_to_test_code/tests/leet75/test_node.py" line="10" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_product_except_self.Test" name="test_product_except_self" file="learning_to_test_code/tests/leet75/test_product_except_self.py" line="9" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_quick_sort.Test" name="test_partition" file="learning_to_test_code/tests/leet75/test_quick_sort.py" line="11" time="0.000" /><testcase classname="learning_to_test_code.tests.leet75.test_quick_sort.Test" name="test_quicksort" file="learning_to_test_code/tests/leet75/test_quick_sort.py" line="16" time="0.000" /><testcase classname="learning_to_test_code.tests.leet75.test_roman_to_integer.Test" name="test_roman_to_int" file="learning_to_test_code/tests/leet75/test_roman_to_integer.py" line="6" time="0.000" /><testcase classname="learning_to_test_code.tests.leet75.test_search_rotated_sorted_array.Test" name="test_search" file="learning_to_test_code/tests/leet75/test_search_rotated_sorted_array.py" line="11" time="0.001"><failure message="assert None == 4&#10; +  where None = &lt;bound method Solution.search of &lt;scripts.leet75.search_rotated_sorted_array.Solution object at 0x7f51172d15b0&gt;&gt;([4, 5, 6, 7, 0, 1, ...], 0)&#10; +    where &lt;bound method Solution.search of &lt;scripts.leet75.search_rotated_sorted_array.Solution object at 0x7f51172d15b0&gt;&gt; = &lt;scripts.leet75.search_rotated_sorted_array.Solution object at 0x7f51172d15b0&gt;.search">self = &lt;test_search_rotated_sorted_array.Test object at 0x7f51172d1580&gt;

    def test_search(self):
        solution = Solution()
        for case, target, expected in self.test_cases:
&gt;           assert solution.search(case, target) == expected
E           assert None == 4
E            +  where None = &lt;bound method Solution.search of &lt;scripts.leet75.search_rotated_sorted_array.Solution object at 0x7f51172d15b0&gt;&gt;([4, 5, 6, 7, 0, 1, ...], 0)
E            +    where &lt;bound method Solution.search of &lt;scripts.leet75.search_rotated_sorted_array.Solution object at 0x7f51172d15b0&gt;&gt; = &lt;scripts.leet75.search_rotated_sorted_array.Solution object at 0x7f51172d15b0&gt;.search

tests/leet75/test_search_rotated_sorted_array.py:15: AssertionError</failure></testcase><testcase classname="learning_to_test_code.tests.leet75.test_three_sum.Test" name="test_three_sum" file="learning_to_test_code/tests/leet75/test_three_sum.py" line="11" time="0.001"><failure message="assert [[-1, -1, 2], [-1, 0, 1]] == [[-1, 0, 1], [-1, -1, 2]]&#10;  At index 0 diff: [-1, -1, 2] != [-1, 0, 1]&#10;  Use -v to get the full diff">self = &lt;test_three_sum.Test object at 0x7f51172d1f10&gt;

    def test_three_sum(self):
        solution = Solution()
        for case, expected in self.test_cases:
&gt;           assert expected == solution.threeSum(case)
E           assert [[-1, -1, 2], [-1, 0, 1]] == [[-1, 0, 1], [-1, -1, 2]]
E             At index 0 diff: [-1, -1, 2] != [-1, 0, 1]
E             Use -v to get the full diff

tests/leet75/test_three_sum.py:15: AssertionError</failure></testcase><testcase classname="learning_to_test_code.tests.leet75.test_twoSum.Test" name="test_twoSum" file="learning_to_test_code/tests/leet75/test_twoSum.py" line="21" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_twoSum.Test" name="test_solution_twoSum" file="learning_to_test_code/tests/leet75/test_twoSum.py" line="26" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_twoSum.Test" name="test_solution_twoSumHashMap" file="learning_to_test_code/tests/leet75/test_twoSum.py" line="30" time="0.001" /><testcase classname="learning_to_test_code.tests.leet75.test_valid_parentheses.Test" name="test_isValid" file="learning_to_test_code/tests/leet75/test_valid_parentheses.py" line="10" time="0.001" /></testsuite></testsuites>